generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  //provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String    @id @default(cuid())
  firstName            String?
  lastName             String?
  password             String
  email                String
  phone                String    @unique
  address              String
  businessName         String
  userType             String
  passwordResetRequest String?
  updateInfoAccess     String?
  accounts             Account[]
  ledger               Ledger[]
  buyer                Buyer?
  mbossOps             MbossOps?
  seller               Seller?
  wallet               Wallet?
  sensitiveData        SensitiveData?
  sessions             Session[]
  mBossUser            String?
  createdAt DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Seller {
  id                                String                             @id @default(cuid())
  fullName                          String
  fatherName                        String
  nrcPassport                       String
  maritalStatus                     String
  birthDate                         String
  birthPlace                        String
  position                          String
  nationality                       String
  landLine                          String?
  mobile                            String
  userId                            String                             @unique
  user                              User                               @relation(fields: [userId], references: [id], onDelete: Cascade)
  sellerAuthorizedPersonInformation SellerAuthorizedPersonInformation?
  sellerCompany                     SellerCompany?
  sellerKYC                         SellerKYC?
  sellerPersonalAddress             SellerPersonalAddress?
  order                             Order[]
}

model SellerAuthorizedPersonInformation {
  Id         String  @id @default(cuid())
  fullName   String?
  fatherName String?
  mobile     String?
  email      String?
  sellerId   String  @unique
  seller     Seller  @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}

model SellerPersonalAddress {
  Id            String  @id @default(cuid())
  addressLine1  String
  addressLine2  String?
  country       String
  township      String
  stateDivision String
  zipCode       String?
  sellerId      String  @unique
  seller        Seller  @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}

model SellerCompany {
  id                 String      @id @default(cuid())
  businessName       String
  businessEmail      String
  registrationNumber String
  registrationDate   String
  entityType         String
  industry           String
  noOfEmployees      String
  revenueModel       String?
  clients            String?
  ownership          String?
  productService     String
  netWorthPerAnnum   String
  landLine           String?
  mobile             String
  addressLine1       String
  addressLine2       String?
  country            String
  township           String
  stateDivision      String
  zipCode            String?
  effectiveDate      String?
  sellerId           String      @unique
  references         Reference[]
  seller             Seller      @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}

model Reference {
  id              String        @id @default(cuid())
  fullName        String
  fatherName      String
  nrcNumber       String
  address         String
  mobileNumber    String
  position        String
  email           String
  sellerCompanyId String
  sellerCompany   SellerCompany @relation(fields: [sellerCompanyId], references: [id], onDelete: Cascade)
}

model SellerKYC {
  Id                       String @id @default(cuid())
  nrc                      String
  utilityBill              String
  memorandumOfAssociation  String
  licenseOfImportExport    String
  companyRegistration      String
  companyBankBookStatement String
  form6Form26              String
  relevantBusinessLicense  String
  articleOfAssociation     String
  bodResolution            String
  sellerId                 String @unique
  seller                   Seller @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}

model Buyer {
  Id                    String                 @id @default(cuid())
  name                  String
  dateOfBirth           String
  fatherName            String
  nationality           String
  nrcPassport           String
  qualification         String
  occupation            String
  maritalStatus         String
  nameOfSpouse          String
  spouseNrcPassport     String
  permanementAddress    String
  currentAddress        String
  postalAddress         String
  contactNo             String
  email                 String
  annualIncome          String
  sourceOfFundNetworth  String
  userId                String                 @unique
  authorizePersonInfo   AuthorizePersonInfo?
  bankReference         BankReference?
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  contactPersonInfo     ContactPersonInfo?
  EmploymentDetails     EmploymentDetails?
  selfEmploymentDetails SelfEmploymentDetails?
  order                             Order[]
}

model EmploymentDetails {
  Id              String @id @default(cuid())
  businessNature  String
  position        String
  yearOfService   String
  employerName    String
  employerAddress String
  officeContactNo String
  buyerId         String @unique
  buyer           Buyer  @relation(fields: [buyerId], references: [Id], onDelete: Cascade)
}

model SelfEmploymentDetails {
  Id               String @id @default(cuid())
  natureOfBusiness String
  revenueModel     String
  buyerId          String @unique
  buyer            Buyer  @relation(fields: [buyerId], references: [Id], onDelete: Cascade)
}

model BankReference {
  Id            String @id @default(cuid())
  bankAccountNo String
  bankName      String
  bankBranch    String
  typeOfAccount String
  buyerId       String @unique
  buyer         Buyer  @relation(fields: [buyerId], references: [Id], onDelete: Cascade)
}

model ContactPersonInfo {
  Id          String @id @default(cuid())
  name        String
  nrcPassport String
  nationality String
  phone       String
  email       String
  buyerId     String @unique
  buyer       Buyer  @relation(fields: [buyerId], references: [Id], onDelete: Cascade)
}

model AuthorizePersonInfo {
  Id          String @id @default(cuid())
  name        String
  nrcPassport String
  buyerId     String @unique
  buyer       Buyer  @relation(fields: [buyerId], references: [Id], onDelete: Cascade)
}

model MbossOps {
  Id           String @id @default(cuid())
  employmentId String
  department   String
  userId       String @unique
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordReset {
  Id              String  @id @default(cuid())
  phone           String
  token           String
  tokenExpireDate String?
}

model Asset{
  Id String @id @default(cuid())
  assetId           String
  originalAsset       String
  status              String
  issueDate           String
  paymentTerm         String
  expectedDayDelays   String
  saleDate            String
  originalOwnerId     String
  currentOwnerId      String?
  payerInfo           PayerInfo?
  order                             Order[]
}

model PayerInfo{
  Id String @id @default(cuid())
  payer     String
  payerRefLink  String
  payerLogo     String
  payerDescription  String
  assetFaceValue  String
  assetCurrency   String
  assetId      String @unique
  asset Asset @relation(fields: [assetId], references: [Id], onDelete: Cascade)
}

model TradeInfo{
  Id String @id @default(cuid())
  discountRate  String
  factoringFeesRate String
  collectionFeesRate String
  funderIncomeTaxRate String
}

model TradeHistory{
  Id String @id @default(cuid())
  transitionDate DateTime @default(now())
  assetId String
  sellerId  String
  buyerId   String
  purchasePrice String
  opsProfit String
  discountRate  String
  factoringFeesRate String
  collectionFeesRate String
  funderIncomeTaxRate String
}

model Wallet{
  Id String @id @default(cuid())
  publicKey String?
  secretKey String?
  envelopeXDR   String?
  memoType      String?
  ledgerId        String?
  maxFee        String?
  hash          String?
  sourceAccount String?
  sourceAccountSequence String?
  sourceWalletId String?
  userId                            String                             @unique
  user                              User                               @relation(fields: [userId], references: [id], onDelete: Cascade)
  ledger       Ledger[]
  createdDate DateTime @default(now())
  updatedDate DateTime @default(now())
}

model Ledger {
  Id String @id @default(cuid())
  walletId String
  wallet  Wallet @relation(fields: [walletId], references: [Id], onDelete: Cascade)
  userId String
  user User  @relation(fields: [userId], references: [id])
  resultXDR String?
  action  String
  description String?
  amount  Float
  createdDate DateTime @default(now())
  order                             Order?
}

model SensitiveData{
  Id String @id @default(cuid())
  secretKey String
  walledtId String
  userId                            String @unique
  user                              User                               @relation(fields: [userId], references: [id], onDelete: Cascade)
  status    String
}
model PrimaryWallet {
  Id            String @id @default(cuid())
  publicKey     String
  secretKey     String
  envelopeXDR   String
  memoType      String
  ledgerId        String
  maxFee        String
  hash          String
  sourceAccount String
  sourceAccountSequence String
  sourceWalletId String
  createdDate   DateTime @default(now())
  updatedDate   DateTime @default(now())
}

model Order{
  Id String @id @default(cuid())
  ledgerId String     @unique
  ledger   Ledger     @relation(fields: [ledgerId], references: [Id])
  sellerId String
  seller   Seller       @relation(fields: [sellerId], references: [id])
  buyerId  String
  buyer    Buyer       @relation(fields: [buyerId], references: [Id])
  assetId  String
  asset    Asset @relation(fields: [assetId], references: [Id])
  soldPrice String
  status   String
  createdDate   DateTime @default(now())
  updatedDate   DateTime @default(now())
}
